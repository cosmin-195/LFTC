<cmpstmt> ::= <stmt> | <stmt> ";" <cmpstmt>
<stmt> ::= <assignStmt> | <structStmt> | <funcDeclStmt>
<assignStmt> ::= <identifier> "=" <expression>
// no IO statements, they are instead functions part of the standard library
<funcDeclStmt> ::=  <func>{<cmpstmt>}

<expression> ::= <expression> "+" <term> | <term> | <expression> "-" <term> | <logicExpression> | <initializer>
<term> ::= <term> * <factor> | <factor> | <term> "/" <factor>
<factor> ::= ( <expression> ) | <identifier> | <const> | <functioncall>
<functioncall> ::=  <identifier>() | <identifier>(<expressionSeq>)
<expressionSeq> ::=  <expression> | <expression>,<expressionSeq>  //this is for function parameters only so I can have f(5+3, a/2, g(a+b))

<initializer> ::= <emptyInitializer> | <copyInitializer>
<emptyInitializer> ::= {} | []
<copyInitializer> ::= {<dictInitializer>} | [<listInitializer>]
<dictInitializer> ::= <keyValue> | <keyValue> "," <dictInitializer>
<keyValue> ::= <string> : <expression>
<listInitializer> ::= <expression> | <expression> , <listInitializer>

<structStmt> ::= <cmpstmt> | <ifStmt> | <whileStmt> | <iterStmt>
<ifStmt> ::= VERIFY <condition> { <cmpstmt> } | VERIFY <condition> { <cmpstmt> } OTHERWISE { <cmpstmt> }
<whileStmt> ::= WHILE <condition> { <cmpstmt> }
<condition> ::= <expression> <relation> <expression>
<relation> ::= <|<=|eq|>|>=
<iterStmt> ::= FOR <identifier> in <expression>

<logicExpression> ::= "NOT" <logicExpression> |  <logicExpression> "or" <logicExpression> | <logicExpression> "and" <logicExpression> | expression




